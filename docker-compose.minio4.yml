# source private.env; export S3_ACCESS_KEY_ID; export S3_SECRET_ACCESS_KEY; docker-compose -f docker-compose.yml -f docker-compose.minio4.yml up
version: '3.8'

x-minio-common:
   &minio-common
   env_file:
      - private.env
      - public.env
   environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
   image: quay.io/minio/minio:latest
   command: server --console-address ":9001" http://minio{1...4}/data{1...2}
   healthcheck:
      test:
         [
            "CMD",
            "curl",
            "-f",
            "http://localhost:9000/minio/health/live"
         ]
      interval: 30s
      timeout: 20s
      retries: 3

services:
   app:
      depends_on:
         - db
         - minio-server

   # starts 4 docker containers running minio server instances.
   # using nginx reverse proxy, load balancing, you can access
   # it through port 9000.
   minio1:
      <<: *minio-common
      hostname: minio1
      volumes:
         - data1-1:/data1 # data1-1 can a physical HD e.g. /mnt/data1
         - data1-2:/data2

   minio2:
      <<: *minio-common
      hostname: minio2
      volumes:
         - data2-1:/data1
         - data2-2:/data2

   minio3:
      <<: *minio-common
      hostname: minio3
      volumes:
         - data3-1:/data1
         - data3-2:/data2

   minio4:
      <<: *minio-common
      hostname: minio4
      volumes:
         - data4-1:/data1
         - data4-2:/data2

   minio-server:
      image: nginx:1.19.2-alpine
      hostname: minio-server
      volumes:
         - ./config/nginx4.conf:/etc/nginx/nginx.conf:ro
      ports:
         # needed to access console http://127.0.0.1:9001/login
         - "9000:9000"
         - "9001:9001"
      depends_on:
         - minio1
         - minio2
         - minio3
         - minio4

volumes:
   data1-1:
   data1-2:
   data2-1:
   data2-2:
   data3-1:
   data3-2:
   data4-1:
   data4-2:
